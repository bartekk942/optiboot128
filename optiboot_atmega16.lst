
optiboot_atmega16.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001be  00003e00  00003e00  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .version      00000002  00003ffe  00003ffe  00000252  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000000  00800060  00003fbe  00000252  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .stab         00000c48  00000000  00000000  00000254  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d3f  00000000  00000000  00000e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001bdb  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00003e00 <main>:
    3e00:	1f 92       	push	r1
    3e02:	cd b7       	in	r28, 0x3d	; 61
    3e04:	de b7       	in	r29, 0x3e	; 62
    3e06:	11 24       	eor	r1, r1
    3e08:	8f e5       	ldi	r24, 0x5F	; 95
    3e0a:	94 e0       	ldi	r25, 0x04	; 4
    3e0c:	9e bf       	out	0x3e, r25	; 62
    3e0e:	8d bf       	out	0x3d, r24	; 61
    3e10:	84 b7       	in	r24, 0x34	; 52
    3e12:	14 be       	out	0x34, r1	; 52
    3e14:	98 2f       	mov	r25, r24
    3e16:	9d 70       	andi	r25, 0x0D	; 13
    3e18:	09 f0       	breq	.+2      	; 0x3e1c <main+0x1c>
    3e1a:	cb d0       	rcall	.+406    	; 0x3fb2 <appStart>
    3e1c:	85 e0       	ldi	r24, 0x05	; 5
    3e1e:	8e bd       	out	0x2e, r24	; 46
    3e20:	82 e0       	ldi	r24, 0x02	; 2
    3e22:	8b b9       	out	0x0b, r24	; 11
    3e24:	88 e1       	ldi	r24, 0x18	; 24
    3e26:	8a b9       	out	0x0a, r24	; 10
    3e28:	86 e8       	ldi	r24, 0x86	; 134
    3e2a:	80 bd       	out	0x20, r24	; 32
    3e2c:	80 e1       	ldi	r24, 0x10	; 16
    3e2e:	89 b9       	out	0x09, r24	; 9
    3e30:	8e e0       	ldi	r24, 0x0E	; 14
    3e32:	ac d0       	rcall	.+344    	; 0x3f8c <watchdogConfig>
    3e34:	b8 9a       	sbi	0x17, 0	; 23
    3e36:	26 e0       	ldi	r18, 0x06	; 6
    3e38:	80 e3       	ldi	r24, 0x30	; 48
    3e3a:	9c ef       	ldi	r25, 0xFC	; 252
    3e3c:	54 e0       	ldi	r21, 0x04	; 4
    3e3e:	41 e0       	ldi	r20, 0x01	; 1
    3e40:	9d bd       	out	0x2d, r25	; 45
    3e42:	8c bd       	out	0x2c, r24	; 44
    3e44:	58 bf       	out	0x38, r21	; 56
    3e46:	08 b6       	in	r0, 0x38	; 56
    3e48:	02 fe       	sbrs	r0, 2
    3e4a:	fd cf       	rjmp	.-6      	; 0x3e46 <main+0x46>
    3e4c:	38 b3       	in	r19, 0x18	; 24
    3e4e:	34 27       	eor	r19, r20
    3e50:	38 bb       	out	0x18, r19	; 24
    3e52:	a8 95       	wdr
    3e54:	21 50       	subi	r18, 0x01	; 1
    3e56:	a1 f7       	brne	.-24     	; 0x3e40 <main+0x40>
    3e58:	81 2c       	mov	r8, r1
    3e5a:	91 2c       	mov	r9, r1
    3e5c:	ff 24       	eor	r15, r15
    3e5e:	f3 94       	inc	r15
    3e60:	95 e0       	ldi	r25, 0x05	; 5
    3e62:	e9 2e       	mov	r14, r25
    3e64:	21 e1       	ldi	r18, 0x11	; 17
    3e66:	d2 2e       	mov	r13, r18
    3e68:	8a d0       	rcall	.+276    	; 0x3f7e <getch>
    3e6a:	81 34       	cpi	r24, 0x41	; 65
    3e6c:	b9 f4       	brne	.+46     	; 0x3e9c <main+0x9c>
    3e6e:	87 d0       	rcall	.+270    	; 0x3f7e <getch>
    3e70:	89 83       	std	Y+1, r24	; 0x01
    3e72:	90 d0       	rcall	.+288    	; 0x3f94 <verifySpace>
    3e74:	89 81       	ldd	r24, Y+1	; 0x01
    3e76:	82 38       	cpi	r24, 0x82	; 130
    3e78:	11 f4       	brne	.+4      	; 0x3e7e <main+0x7e>
    3e7a:	82 e0       	ldi	r24, 0x02	; 2
    3e7c:	0d c0       	rjmp	.+26     	; 0x3e98 <main+0x98>
    3e7e:	81 38       	cpi	r24, 0x81	; 129
    3e80:	51 f4       	brne	.+20     	; 0x3e96 <main+0x96>
    3e82:	86 e0       	ldi	r24, 0x06	; 6
    3e84:	09 c0       	rjmp	.+18     	; 0x3e98 <main+0x98>
    3e86:	85 37       	cpi	r24, 0x75	; 117
    3e88:	09 f0       	breq	.+2      	; 0x3e8c <main+0x8c>
    3e8a:	6d c0       	rjmp	.+218    	; 0x3f66 <main+0x166>
    3e8c:	83 d0       	rcall	.+262    	; 0x3f94 <verifySpace>
    3e8e:	8e e1       	ldi	r24, 0x1E	; 30
    3e90:	72 d0       	rcall	.+228    	; 0x3f76 <putch>
    3e92:	84 e9       	ldi	r24, 0x94	; 148
    3e94:	70 d0       	rcall	.+224    	; 0x3f76 <putch>
    3e96:	83 e0       	ldi	r24, 0x03	; 3
    3e98:	6e d0       	rcall	.+220    	; 0x3f76 <putch>
    3e9a:	6a c0       	rjmp	.+212    	; 0x3f70 <main+0x170>
    3e9c:	82 34       	cpi	r24, 0x42	; 66
    3e9e:	11 f4       	brne	.+4      	; 0x3ea4 <main+0xa4>
    3ea0:	84 e1       	ldi	r24, 0x14	; 20
    3ea2:	03 c0       	rjmp	.+6      	; 0x3eaa <main+0xaa>
    3ea4:	85 34       	cpi	r24, 0x45	; 69
    3ea6:	19 f4       	brne	.+6      	; 0x3eae <main+0xae>
    3ea8:	85 e0       	ldi	r24, 0x05	; 5
    3eaa:	7c d0       	rcall	.+248    	; 0x3fa4 <getNch>
    3eac:	61 c0       	rjmp	.+194    	; 0x3f70 <main+0x170>
    3eae:	85 35       	cpi	r24, 0x55	; 85
    3eb0:	41 f4       	brne	.+16     	; 0x3ec2 <main+0xc2>
    3eb2:	65 d0       	rcall	.+202    	; 0x3f7e <getch>
    3eb4:	88 2e       	mov	r8, r24
    3eb6:	63 d0       	rcall	.+198    	; 0x3f7e <getch>
    3eb8:	91 2c       	mov	r9, r1
    3eba:	98 2a       	or	r9, r24
    3ebc:	88 0c       	add	r8, r8
    3ebe:	99 1c       	adc	r9, r9
    3ec0:	56 c0       	rjmp	.+172    	; 0x3f6e <main+0x16e>
    3ec2:	86 35       	cpi	r24, 0x56	; 86
    3ec4:	21 f4       	brne	.+8      	; 0x3ece <main+0xce>
    3ec6:	84 e0       	ldi	r24, 0x04	; 4
    3ec8:	6d d0       	rcall	.+218    	; 0x3fa4 <getNch>
    3eca:	80 e0       	ldi	r24, 0x00	; 0
    3ecc:	e5 cf       	rjmp	.-54     	; 0x3e98 <main+0x98>
    3ece:	84 36       	cpi	r24, 0x64	; 100
    3ed0:	09 f0       	breq	.+2      	; 0x3ed4 <main+0xd4>
    3ed2:	39 c0       	rjmp	.+114    	; 0x3f46 <main+0x146>
    3ed4:	54 d0       	rcall	.+168    	; 0x3f7e <getch>
    3ed6:	53 d0       	rcall	.+166    	; 0x3f7e <getch>
    3ed8:	c8 2e       	mov	r12, r24
    3eda:	51 d0       	rcall	.+162    	; 0x3f7e <getch>
    3edc:	b8 2e       	mov	r11, r24
    3ede:	00 e6       	ldi	r16, 0x60	; 96
    3ee0:	10 e0       	ldi	r17, 0x00	; 0
    3ee2:	80 e6       	ldi	r24, 0x60	; 96
    3ee4:	c8 0e       	add	r12, r24
    3ee6:	4b d0       	rcall	.+150    	; 0x3f7e <getch>
    3ee8:	f8 01       	movw	r30, r16
    3eea:	81 93       	st	Z+, r24
    3eec:	8f 01       	movw	r16, r30
    3eee:	ce 12       	cpse	r12, r30
    3ef0:	fa cf       	rjmp	.-12     	; 0x3ee6 <main+0xe6>
    3ef2:	50 d0       	rcall	.+160    	; 0x3f94 <verifySpace>
    3ef4:	f5 e4       	ldi	r31, 0x45	; 69
    3ef6:	bf 12       	cpse	r11, r31
    3ef8:	01 c0       	rjmp	.+2      	; 0x3efc <main+0xfc>
    3efa:	ff cf       	rjmp	.-2      	; 0x3efa <main+0xfa>
    3efc:	83 e0       	ldi	r24, 0x03	; 3
    3efe:	f4 01       	movw	r30, r8
    3f00:	87 bf       	out	0x37, r24	; 55
    3f02:	e8 95       	spm
    3f04:	07 b6       	in	r0, 0x37	; 55
    3f06:	00 fc       	sbrc	r0, 0
    3f08:	fd cf       	rjmp	.-6      	; 0x3f04 <main+0x104>
    3f0a:	b4 01       	movw	r22, r8
    3f0c:	a0 e6       	ldi	r26, 0x60	; 96
    3f0e:	b0 e0       	ldi	r27, 0x00	; 0
    3f10:	2c 91       	ld	r18, X
    3f12:	12 96       	adiw	r26, 0x02	; 2
    3f14:	ad 01       	movw	r20, r26
    3f16:	41 50       	subi	r20, 0x01	; 1
    3f18:	51 09       	sbc	r21, r1
    3f1a:	fa 01       	movw	r30, r20
    3f1c:	80 81       	ld	r24, Z
    3f1e:	30 e0       	ldi	r19, 0x00	; 0
    3f20:	38 2b       	or	r19, r24
    3f22:	fb 01       	movw	r30, r22
    3f24:	09 01       	movw	r0, r18
    3f26:	f7 be       	out	0x37, r15	; 55
    3f28:	e8 95       	spm
    3f2a:	11 24       	eor	r1, r1
    3f2c:	6e 5f       	subi	r22, 0xFE	; 254
    3f2e:	7f 4f       	sbci	r23, 0xFF	; 255
    3f30:	ca 12       	cpse	r12, r26
    3f32:	ee cf       	rjmp	.-36     	; 0x3f10 <main+0x110>
    3f34:	f4 01       	movw	r30, r8
    3f36:	e7 be       	out	0x37, r14	; 55
    3f38:	e8 95       	spm
    3f3a:	07 b6       	in	r0, 0x37	; 55
    3f3c:	00 fc       	sbrc	r0, 0
    3f3e:	fd cf       	rjmp	.-6      	; 0x3f3a <main+0x13a>
    3f40:	d7 be       	out	0x37, r13	; 55
    3f42:	e8 95       	spm
    3f44:	15 c0       	rjmp	.+42     	; 0x3f70 <main+0x170>
    3f46:	84 37       	cpi	r24, 0x74	; 116
    3f48:	09 f0       	breq	.+2      	; 0x3f4c <main+0x14c>
    3f4a:	9d cf       	rjmp	.-198    	; 0x3e86 <main+0x86>
    3f4c:	18 d0       	rcall	.+48     	; 0x3f7e <getch>
    3f4e:	17 d0       	rcall	.+46     	; 0x3f7e <getch>
    3f50:	c8 2e       	mov	r12, r24
    3f52:	15 d0       	rcall	.+42     	; 0x3f7e <getch>
    3f54:	1f d0       	rcall	.+62     	; 0x3f94 <verifySpace>
    3f56:	84 01       	movw	r16, r8
    3f58:	f8 01       	movw	r30, r16
    3f5a:	85 91       	lpm	r24, Z+
    3f5c:	8f 01       	movw	r16, r30
    3f5e:	0b d0       	rcall	.+22     	; 0x3f76 <putch>
    3f60:	ca 94       	dec	r12
    3f62:	d1 f7       	brne	.-12     	; 0x3f58 <main+0x158>
    3f64:	05 c0       	rjmp	.+10     	; 0x3f70 <main+0x170>
    3f66:	81 35       	cpi	r24, 0x51	; 81
    3f68:	11 f4       	brne	.+4      	; 0x3f6e <main+0x16e>
    3f6a:	88 e0       	ldi	r24, 0x08	; 8
    3f6c:	0f d0       	rcall	.+30     	; 0x3f8c <watchdogConfig>
    3f6e:	12 d0       	rcall	.+36     	; 0x3f94 <verifySpace>
    3f70:	80 e1       	ldi	r24, 0x10	; 16
    3f72:	01 d0       	rcall	.+2      	; 0x3f76 <putch>
    3f74:	79 cf       	rjmp	.-270    	; 0x3e68 <main+0x68>

00003f76 <putch>:
  }
}

void putch(char ch) {
#ifndef SOFT_UART
  while (!(UART_SRA & _BV(UDRE0)));
    3f76:	5d 9b       	sbis	0x0b, 5	; 11
    3f78:	fe cf       	rjmp	.-4      	; 0x3f76 <putch>
  UART_UDR = ch;
    3f7a:	8c b9       	out	0x0c, r24	; 12
    3f7c:	08 95       	ret

00003f7e <getch>:
      [uartBit] "I" (UART_RX_BIT)
    :
      "r25"
);
#else
  while(!(UART_SRA & _BV(RXC0)))
    3f7e:	5f 9b       	sbis	0x0b, 7	; 11
    3f80:	fe cf       	rjmp	.-4      	; 0x3f7e <getch>
    ;
  if (!(UART_SRA & _BV(FE0))) {
    3f82:	5c 99       	sbic	0x0b, 4	; 11
    3f84:	01 c0       	rjmp	.+2      	; 0x3f88 <getch+0xa>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    3f86:	a8 95       	wdr
       * don't care that an invalid char is returned...)
       */
    watchdogReset();
  }

  ch = UART_UDR;
    3f88:	8c b1       	in	r24, 0x0c	; 12
  LED_PIN |= _BV(LED);
#endif
#endif

  return ch;
}
    3f8a:	08 95       	ret

00003f8c <watchdogConfig>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    3f8c:	98 e1       	ldi	r25, 0x18	; 24
    3f8e:	91 bd       	out	0x21, r25	; 33
  WDTCSR = x;
    3f90:	81 bd       	out	0x21, r24	; 33
    3f92:	08 95       	ret

00003f94 <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
    3f94:	f4 df       	rcall	.-24     	; 0x3f7e <getch>
    3f96:	80 32       	cpi	r24, 0x20	; 32
    3f98:	19 f0       	breq	.+6      	; 0x3fa0 <verifySpace+0xc>
    3f9a:	88 e0       	ldi	r24, 0x08	; 8
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    3f9c:	f7 df       	rcall	.-18     	; 0x3f8c <watchdogConfig>
    3f9e:	ff cf       	rjmp	.-2      	; 0x3f9e <verifySpace+0xa>
    3fa0:	84 e1       	ldi	r24, 0x14	; 20
    3fa2:	e9 cf       	rjmp	.-46     	; 0x3f76 <putch>

00003fa4 <getNch>:
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
    3fa4:	cf 93       	push	r28
    3fa6:	c8 2f       	mov	r28, r24
  do getch(); while (--count);
    3fa8:	ea df       	rcall	.-44     	; 0x3f7e <getch>
    3faa:	c1 50       	subi	r28, 0x01	; 1
    3fac:	e9 f7       	brne	.-6      	; 0x3fa8 <getNch+0x4>
    3fae:	cf 91       	pop	r28
  verifySpace();
}
    3fb0:	f1 cf       	rjmp	.-30     	; 0x3f94 <verifySpace>

00003fb2 <appStart>:

void appStart(uint8_t rstFlags) {
  // save the reset flags in the designated register
  //  This can be saved in a main program by putting code in .init0 (which
  //  executes before normal c init code) to save R2 to a global variable.
  __asm__ __volatile__ ("mov r2, %0\n" :: "r" (rstFlags));
    3fb2:	28 2e       	mov	r2, r24

  watchdogConfig(WATCHDOG_OFF);
    3fb4:	80 e0       	ldi	r24, 0x00	; 0
    3fb6:	ea df       	rcall	.-44     	; 0x3f8c <watchdogConfig>
    3fb8:	e0 e0       	ldi	r30, 0x00	; 0
  // Note that appstart_vec is defined so that this works with either
  // real or virtual boot partitions.
  __asm__ __volatile__ (
    3fba:	ff 27       	eor	r31, r31
    3fbc:	09 94       	ijmp
